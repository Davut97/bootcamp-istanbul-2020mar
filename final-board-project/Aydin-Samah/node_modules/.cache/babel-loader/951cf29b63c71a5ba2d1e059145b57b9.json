{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport { v4 as uuidv4 } from 'uuid';\nimport 'firebase/firestore';\nexport const createList = list => {\n  // console.log(list);\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    // getfirestore from index middleware\n    const fireStore = getFirestore(); //ref to firestore database\n\n    fireStore.collection('lists').add({ ...list,\n      createdAt: new Date(),\n      isCompleted: false\n    }).then(() => {\n      dispatch({\n        type: actionTypes.ADD_LIST,\n        list\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'CREATE_ERROR',\n        error\n      });\n    });\n  };\n};\nexport const addItem = item => {\n  const {\n    name,\n    amount,\n    id\n  } = item; // console.log(name, amount, id);\n\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make async call to database\n    const firestore = getFirestore(); // ref to firestore api\n\n    const firebase = getFirebase(); //ref to our data base\n\n    firestore.collection('lists').doc(id).update({\n      items: firebase.firestore.FieldValue.arrayUnion({\n        name: name,\n        amount: amount,\n        id: uuidv4(),\n        isSelected: false\n      })\n    }).then(() => {\n      dispatch({\n        type: actionTypes.ADD_ITEM,\n        item\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'UPDATE_UTENTE_ERROR',\n        err\n      });\n    });\n  };\n};\n/**washingtonRef.update({\r\n    regions: firebase.firestore.FieldValue.arrayUnion(\"greater_virginia\")\r\n}); */\n\nexport const deleteItem = item => {\n  const {\n    listId,\n    itemId,\n    itemName,\n    itemAmount\n  } = item; // console.log(item);\n  // console.log(item);\n\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make async call to database\n    const firestore = getFirestore(); // ref to firestore api\n\n    const firebase = getFirebase(); //ref to our data base\n\n    firestore.collection('lists').doc(listId).update({\n      items: firebase.firestore.FieldValue.arrayRemove({\n        id: itemId,\n        name: itemName,\n        amount: itemAmount\n      })\n    }).then(() => {\n      dispatch({\n        type: actionTypes.REMOVE_ITEM,\n        item\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'ERROR_ON_DELETE',\n        err\n      });\n    });\n  };\n};\nexport const editItem = item => {\n  const {\n    listId,\n    itemId,\n    itemName,\n    itemAmount\n  } = item; // console.log(name, amount, id);\n  // console.log(itemName);\n\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make async call to database\n    const firestore = getFirestore(); // ref to firestore api\n\n    firestore.collection('lists').doc(listId).update({\n      items: [{\n        id: itemId,\n        name: itemName,\n        amount: itemAmount\n      }]\n    }).then(() => {\n      dispatch({\n        type: actionTypes.REMOVE_ITEM,\n        item\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'ERROR_ON_DELETE',\n        err\n      });\n    });\n  };\n};\nexport const createCompletedList = list => {\n  const {\n    title,\n    listId,\n    image\n  } = list;\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    // getfirestore from index middleware\n    const fireStore = getFirestore(); //ref to firestore database\n\n    fireStore.collection('CompletedLists').doc(listId).set({\n      title: title,\n      createdAt: new Date(),\n      isCompleted: true,\n      image: image,\n      items: []\n    }).then(() => {\n      dispatch({\n        type: actionTypes.COMPLETED_LIST,\n        list\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'CREATE_ERROR',\n        error\n      });\n    });\n  };\n};\nexport const addItemToCompletedLists = item => {\n  // console.log(item);\n  const {\n    listId\n  } = item; // console.log(name, amount, id);\n  // console.log(item.item.id, item.item.name, item.item.amount, listId);\n\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make async call to database\n    const firestore = getFirestore(); // ref to firestore api\n\n    const firebase = getFirebase(); //ref to our data base\n\n    firestore.collection('CompletedLists').doc(listId).update({\n      items: firebase.firestore.FieldValue.arrayUnion({\n        name: item.item.name,\n        amount: item.item.amount,\n        id: item.item.id\n      })\n    }).then(() => {\n      dispatch({\n        type: actionTypes.ADD_ITEM,\n        item\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'UPDATE_UTENTE_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const deleteDoc = item => {\n  // console.log(item);\n  // console.log(name, amount, id);\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make async call to database\n    const firestore = getFirestore(); // ref to firestore api\n\n    firestore.collection(item.collectionName).doc(item.itemId).delete().then(() => {\n      // console.log('hi');\n      dispatch({\n        type: actionTypes.DELETE_DOCUMENT,\n        item\n      });\n    }).catch(err => {\n      dispatch({\n        type: actionTypes.ERROR_DELETE_DOCUMENT,\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/media/aydin/86787318787305E9/reCoded/ShoppingListPlannerTogether2/shopping-list/src/store/actions/listActions.js"],"names":["actionTypes","v4","uuidv4","createList","list","dispatch","getState","getFirestore","fireStore","collection","add","createdAt","Date","isCompleted","then","type","ADD_LIST","catch","error","addItem","item","name","amount","id","getFirebase","firestore","firebase","doc","update","items","FieldValue","arrayUnion","isSelected","ADD_ITEM","err","deleteItem","listId","itemId","itemName","itemAmount","arrayRemove","REMOVE_ITEM","editItem","createCompletedList","title","image","set","COMPLETED_LIST","addItemToCompletedLists","deleteDoc","collectionName","delete","DELETE_DOCUMENT","ERROR_DELETE_DOCUMENT"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nimport 'firebase/firestore';\r\nexport const createList = (list) => {\r\n  // console.log(list);\r\n  return (dispatch, getState, {getFirestore}) => {\r\n    // getfirestore from index middleware\r\n    const fireStore = getFirestore(); //ref to firestore database\r\n    fireStore\r\n      .collection('lists')\r\n      .add({\r\n        ...list,\r\n        createdAt: new Date(),\r\n        isCompleted: false,\r\n      })\r\n      .then(() => {\r\n        dispatch({type: actionTypes.ADD_LIST, list});\r\n      })\r\n      .catch((error) => {\r\n        dispatch({type: 'CREATE_ERROR', error});\r\n      });\r\n  };\r\n};\r\nexport const addItem = (item) => {\r\n  const {name, amount, id} = item;\r\n  // console.log(name, amount, id);\r\n\r\n  return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n    //make async call to database\r\n\r\n    const firestore = getFirestore(); // ref to firestore api\r\n    const firebase = getFirebase(); //ref to our data base\r\n    firestore\r\n      .collection('lists')\r\n      .doc(id)\r\n      .update({\r\n        items: firebase.firestore.FieldValue.arrayUnion({\r\n          name: name,\r\n          amount: amount,\r\n          id: uuidv4(),\r\n          isSelected: false,\r\n        }),\r\n      })\r\n      .then(() => {\r\n        dispatch({type: actionTypes.ADD_ITEM, item});\r\n      })\r\n      .catch((err) => {\r\n        dispatch({type: 'UPDATE_UTENTE_ERROR', err});\r\n      });\r\n  };\r\n};\r\n/**washingtonRef.update({\r\n    regions: firebase.firestore.FieldValue.arrayUnion(\"greater_virginia\")\r\n}); */\r\nexport const deleteItem = (item) => {\r\n  const {listId, itemId, itemName, itemAmount} = item;\r\n  // console.log(item);\r\n  // console.log(item);\r\n  return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n    //make async call to database\r\n\r\n    const firestore = getFirestore(); // ref to firestore api\r\n    const firebase = getFirebase(); //ref to our data base\r\n    firestore\r\n      .collection('lists')\r\n      .doc(listId)\r\n      .update({\r\n        items: firebase.firestore.FieldValue.arrayRemove({\r\n          id: itemId,\r\n          name: itemName,\r\n          amount: itemAmount,\r\n        }),\r\n      })\r\n      .then(() => {\r\n        dispatch({type: actionTypes.REMOVE_ITEM, item});\r\n      })\r\n      .catch((err) => {\r\n        dispatch({type: 'ERROR_ON_DELETE', err});\r\n      });\r\n  };\r\n};\r\nexport const editItem = (item) => {\r\n  const {listId, itemId, itemName, itemAmount} = item;\r\n  // console.log(name, amount, id);\r\n  // console.log(itemName);\r\n  return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n    //make async call to database\r\n\r\n    const firestore = getFirestore(); // ref to firestore api\r\n    firestore\r\n      .collection('lists')\r\n      .doc(listId)\r\n      .update({\r\n        items: [{id: itemId, name: itemName, amount: itemAmount}],\r\n      })\r\n      .then(() => {\r\n        dispatch({type: actionTypes.REMOVE_ITEM, item});\r\n      })\r\n      .catch((err) => {\r\n        dispatch({type: 'ERROR_ON_DELETE', err});\r\n      });\r\n  };\r\n};\r\nexport const createCompletedList = (list) => {\r\n  const {title, listId, image} = list;\r\n  return (dispatch, getState, {getFirestore}) => {\r\n    // getfirestore from index middleware\r\n    const fireStore = getFirestore(); //ref to firestore database\r\n    fireStore\r\n      .collection('CompletedLists')\r\n      .doc(listId)\r\n      .set({\r\n        title: title,\r\n        createdAt: new Date(),\r\n        isCompleted: true,\r\n        image: image,\r\n        items: [],\r\n      })\r\n      .then(() => {\r\n        dispatch({type: actionTypes.COMPLETED_LIST, list});\r\n      })\r\n      .catch((error) => {\r\n        dispatch({type: 'CREATE_ERROR', error});\r\n      });\r\n  };\r\n};\r\n\r\nexport const addItemToCompletedLists = (item) => {\r\n  // console.log(item);\r\n  const {listId} = item;\r\n  // console.log(name, amount, id);\r\n  // console.log(item.item.id, item.item.name, item.item.amount, listId);\r\n  return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n    //make async call to database\r\n\r\n    const firestore = getFirestore(); // ref to firestore api\r\n    const firebase = getFirebase(); //ref to our data base\r\n    firestore\r\n      .collection('CompletedLists')\r\n      .doc(listId)\r\n      .update({\r\n        items: firebase.firestore.FieldValue.arrayUnion({\r\n          name: item.item.name,\r\n          amount: item.item.amount,\r\n          id: item.item.id,\r\n        }),\r\n      })\r\n      .then(() => {\r\n        dispatch({type: actionTypes.ADD_ITEM, item});\r\n      })\r\n      .catch((err) => {\r\n        dispatch({type: 'UPDATE_UTENTE_ERROR', err});\r\n      });\r\n  };\r\n};\r\nexport const deleteDoc = (item) => {\r\n  // console.log(item);\r\n\r\n  // console.log(name, amount, id);\r\n  return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n    //make async call to database\r\n\r\n    const firestore = getFirestore(); // ref to firestore api\r\n    firestore\r\n      .collection(item.collectionName)\r\n      .doc(item.itemId)\r\n      .delete()\r\n      .then(() => {\r\n        // console.log('hi');\r\n        dispatch({type: actionTypes.DELETE_DOCUMENT, item});\r\n      })\r\n      .catch((err) => {\r\n        dispatch({type: actionTypes.ERROR_DELETE_DOCUMENT, err});\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}