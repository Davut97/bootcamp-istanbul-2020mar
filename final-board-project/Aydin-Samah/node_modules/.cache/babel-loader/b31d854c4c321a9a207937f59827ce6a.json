{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport { v4 as uuidv4 } from 'uuid';\nimport 'firebase/firestore';\nexport const createList = list => {\n  console.log(list);\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    // getfirestore from index middleware\n    const fireStore = getFirestore(); //ref to firestore database\n\n    fireStore.collection('lists').add({ ...list,\n      createdAt: new Date(),\n      isCompleted: false\n    }).then(() => {\n      dispatch({\n        type: actionTypes.ADD_LIST,\n        list\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'CREATE_ERROR',\n        error\n      });\n    });\n  };\n};\nexport const addItem = item => {\n  const {\n    name,\n    amount,\n    id\n  } = item; // console.log(name, amount, id);\n\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make async call to database\n    const firestore = getFirestore(); // ref to firestore api\n\n    const firebase = getFirebase(); //ref to our data base\n\n    firestore.collection('lists').doc(id).update({\n      items: firebase.firestore.FieldValue.arrayUnion({\n        name: name,\n        amount: amount,\n        id: uuidv4()\n      })\n    }).then(() => {\n      dispatch({\n        type: actionTypes.ADD_ITEM,\n        item\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'UPDATE_UTENTE_ERROR',\n        err\n      });\n    });\n  };\n};\n/**washingtonRef.update({\r\n    regions: firebase.firestore.FieldValue.arrayUnion(\"greater_virginia\")\r\n}); */\n\nexport const deleteItem = item => {\n  const {\n    listId,\n    itemId,\n    itemName,\n    itemAmount\n  } = item;\n  console.log(item); // console.log(item);\n\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make async call to database\n    const firestore = getFirestore(); // ref to firestore api\n\n    const firebase = getFirebase(); //ref to our data base\n\n    firestore.collection('lists').doc(listId).update({\n      items: firebase.firestore.FieldValue.arrayRemove({\n        id: itemId,\n        name: itemName,\n        amount: itemAmount\n      })\n    }).then(() => {\n      dispatch({\n        type: actionTypes.REMOVE_ITEM,\n        item\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'ERROR_ON_DELETE',\n        err\n      });\n    });\n  };\n};\nexport const editItem = item => {\n  const {\n    listId,\n    itemId,\n    itemName,\n    itemAmount\n  } = item; // console.log(name, amount, id);\n\n  console.log(itemName);\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make async call to database\n    const firestore = getFirestore(); // ref to firestore api\n\n    const firebase = getFirebase(); //ref to our data base\n\n    firestore.collection('lists').doc(listId).set({\n      items: [{\n        id: itemId,\n        name: itemName,\n        amount: itemAmount\n      }]\n    }).then(() => {\n      dispatch({\n        type: actionTypes.REMOVE_ITEM,\n        item\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'ERROR_ON_DELETE',\n        err\n      });\n    });\n  };\n};\nexport const createCompletedList = list => {\n  console.log(list.title);\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    // getfirestore from index middleware\n    const fireStore = getFirestore(); //ref to firestore database\n\n    fireStore.collection('lists').add({\n      title: list.title,\n      createdAt: new Date(),\n      isCompleted: true\n    }).then(() => {\n      dispatch({\n        type: actionTypes.COMPLETED_LIST,\n        list\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'CREATE_ERROR',\n        error\n      });\n    });\n  };\n};\nexport const addItemToCompletedLists = item => {\n  const {\n    name,\n    amount,\n    id\n  } = item; // console.log(name, amount, id);\n\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make async call to database\n    const firestore = getFirestore(); // ref to firestore api\n\n    const firebase = getFirebase(); //ref to our data base\n\n    firestore.collection('CompletedLists').doc(id).update({\n      items: firebase.firestore.FieldValue.arrayUnion({\n        name: name,\n        amount: amount,\n        id: uuidv4()\n      })\n    }).then(() => {\n      dispatch({\n        type: actionTypes.ADD_ITEM,\n        item\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'UPDATE_UTENTE_ERROR',\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["D:/reCoded/ShoppingListPlannerTogether2/shopping-list/src/store/actions/listActions.js"],"names":["actionTypes","v4","uuidv4","createList","list","console","log","dispatch","getState","getFirestore","fireStore","collection","add","createdAt","Date","isCompleted","then","type","ADD_LIST","catch","error","addItem","item","name","amount","id","getFirebase","firestore","firebase","doc","update","items","FieldValue","arrayUnion","ADD_ITEM","err","deleteItem","listId","itemId","itemName","itemAmount","arrayRemove","REMOVE_ITEM","editItem","set","createCompletedList","title","COMPLETED_LIST","addItemToCompletedLists"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport 'firebase/firestore';\r\nexport const createList = list => {\r\n\tconsole.log(list);\r\n\treturn (dispatch, getState, { getFirestore }) => {\r\n\t\t// getfirestore from index middleware\r\n\t\tconst fireStore = getFirestore(); //ref to firestore database\r\n\t\tfireStore\r\n\t\t\t.collection('lists')\r\n\t\t\t.add({\r\n\t\t\t\t...list,\r\n\t\t\t\tcreatedAt: new Date(),\r\n\t\t\t\tisCompleted: false,\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tdispatch({ type: actionTypes.ADD_LIST, list });\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tdispatch({ type: 'CREATE_ERROR', error });\r\n\t\t\t});\r\n\t};\r\n};\r\nexport const addItem = item => {\r\n\tconst { name, amount, id } = item;\r\n\t// console.log(name, amount, id);\r\n\r\n\treturn (dispatch, getState, { getFirebase, getFirestore }) => {\r\n\t\t//make async call to database\r\n\r\n\t\tconst firestore = getFirestore(); // ref to firestore api\r\n\t\tconst firebase = getFirebase(); //ref to our data base\r\n\t\tfirestore\r\n\t\t\t.collection('lists')\r\n\t\t\t.doc(id)\r\n\t\t\t.update({\r\n\t\t\t\titems: firebase.firestore.FieldValue.arrayUnion({\r\n\t\t\t\t\tname: name,\r\n\t\t\t\t\tamount: amount,\r\n\t\t\t\t\tid: uuidv4(),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tdispatch({ type: actionTypes.ADD_ITEM, item });\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tdispatch({ type: 'UPDATE_UTENTE_ERROR', err });\r\n\t\t\t});\r\n\t};\r\n};\r\n/**washingtonRef.update({\r\n    regions: firebase.firestore.FieldValue.arrayUnion(\"greater_virginia\")\r\n}); */\r\nexport const deleteItem = item => {\r\n\tconst { listId, itemId, itemName, itemAmount } = item;\r\n\tconsole.log(item);\r\n\t// console.log(item);\r\n\treturn (dispatch, getState, { getFirebase, getFirestore }) => {\r\n\t\t//make async call to database\r\n\r\n\t\tconst firestore = getFirestore(); // ref to firestore api\r\n\t\tconst firebase = getFirebase(); //ref to our data base\r\n\t\tfirestore\r\n\t\t\t.collection('lists')\r\n\t\t\t.doc(listId)\r\n\t\t\t.update({\r\n\t\t\t\titems: firebase.firestore.FieldValue.arrayRemove({\r\n\t\t\t\t\tid: itemId,\r\n\t\t\t\t\tname: itemName,\r\n\t\t\t\t\tamount: itemAmount,\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tdispatch({ type: actionTypes.REMOVE_ITEM, item });\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tdispatch({ type: 'ERROR_ON_DELETE', err });\r\n\t\t\t});\r\n\t};\r\n};\r\nexport const editItem = item => {\r\n\tconst { listId, itemId, itemName, itemAmount } = item;\r\n\t// console.log(name, amount, id);\r\n\tconsole.log(itemName);\r\n\treturn (dispatch, getState, { getFirebase, getFirestore }) => {\r\n\t\t//make async call to database\r\n\r\n\t\tconst firestore = getFirestore(); // ref to firestore api\r\n\t\tconst firebase = getFirebase(); //ref to our data base\r\n\t\tfirestore\r\n\t\t\t.collection('lists')\r\n\t\t\t.doc(listId)\r\n\t\t\t.set({\r\n\t\t\t\titems: [{ id: itemId, name: itemName, amount: itemAmount }],\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tdispatch({ type: actionTypes.REMOVE_ITEM, item });\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tdispatch({ type: 'ERROR_ON_DELETE', err });\r\n\t\t\t});\r\n\t};\r\n};\r\nexport const createCompletedList = list => {\r\n\tconsole.log(list.title);\r\n\treturn (dispatch, getState, { getFirestore }) => {\r\n\t\t// getfirestore from index middleware\r\n\t\tconst fireStore = getFirestore(); //ref to firestore database\r\n\t\tfireStore\r\n\t\t\t.collection('lists')\r\n\t\t\t.add({\r\n\t\t\t\ttitle: list.title,\r\n\t\t\t\tcreatedAt: new Date(),\r\n\t\t\t\tisCompleted: true,\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tdispatch({ type: actionTypes.COMPLETED_LIST, list });\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tdispatch({ type: 'CREATE_ERROR', error });\r\n\t\t\t});\r\n\t};\r\n};\r\n\r\nexport const addItemToCompletedLists = item => {\r\n\tconst { name, amount, id } = item;\r\n\t// console.log(name, amount, id);\r\n\r\n\treturn (dispatch, getState, { getFirebase, getFirestore }) => {\r\n\t\t//make async call to database\r\n\r\n\t\tconst firestore = getFirestore(); // ref to firestore api\r\n\t\tconst firebase = getFirebase(); //ref to our data base\r\n\t\tfirestore\r\n\t\t\t.collection('CompletedLists')\r\n\t\t\t.doc(id)\r\n\t\t\t.update({\r\n\t\t\t\titems: firebase.firestore.FieldValue.arrayUnion({\r\n\t\t\t\t\tname: name,\r\n\t\t\t\t\tamount: amount,\r\n\t\t\t\t\tid: uuidv4(),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tdispatch({ type: actionTypes.ADD_ITEM, item });\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tdispatch({ type: 'UPDATE_UTENTE_ERROR', err });\r\n\t\t\t});\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}