{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport { v4 as uuidv4 } from 'uuid';\nimport 'firebase/firestore';\nexport const createList = list => {\n  console.log(list);\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    // getfirestore from index middleware\n    const fireStore = getFirestore(); //ref to firestore database\n\n    fireStore.collection('lists').add({ ...list,\n      createdAt: new Date()\n    }).then(() => {\n      dispatch({\n        type: actionTypes.ADD_LIST,\n        list\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'CREATE_ERROR',\n        error\n      });\n    });\n  };\n};\nexport const addItem = item => {\n  const {\n    name,\n    amount,\n    id\n  } = item; // console.log(name, amount, id);\n\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make async call to database\n    const firestore = getFirestore(); // ref to firestore api\n\n    const firebase = getFirebase(); //ref to our data base\n\n    firestore.collection('lists').doc(id).update({\n      items: firebase.firestore.FieldValue.arrayUnion({\n        name: name,\n        amount: amount,\n        id: uuidv4()\n      })\n    }).then(() => {\n      dispatch({\n        type: actionTypes.ADD_ITEM,\n        item\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'UPDATE_UTENTE_ERROR',\n        err\n      });\n    });\n  };\n};\n/**washingtonRef.update({\r\n    regions: firebase.firestore.FieldValue.arrayUnion(\"greater_virginia\")\r\n}); */\n\nexport const deleteItem = item => {\n  const {\n    listId,\n    itemId\n  } = item; // console.log(name, amount, id);\n\n  console.log(item.itemId);\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make async call to database\n    const firestore = getFirestore(); // ref to firestore api\n\n    const firebase = getFirebase(); //ref to our data base\n\n    firestore.collection('lists').doc(listId).update({\n      [\"items.\" + itemId]: firebase.firestore.FieldValue.delete()\n    }).then(() => {\n      dispatch({\n        type: actionTypes.REMOVE_ITEM,\n        item\n      });\n    }).catch(err => {\n      dispatch({\n        type: \"ERROR_ON_DELETE\",\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["D:/reCoded/ShoppingListPlannerTogether2/shopping-list/src/store/actions/listActions.js"],"names":["actionTypes","v4","uuidv4","createList","list","console","log","dispatch","getState","getFirestore","fireStore","collection","add","createdAt","Date","then","type","ADD_LIST","catch","error","addItem","item","name","amount","id","getFirebase","firestore","firebase","doc","update","items","FieldValue","arrayUnion","ADD_ITEM","err","deleteItem","listId","itemId","delete","REMOVE_ITEM"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,OAAO,oBAAP;AACA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SAAO,CAACG,QAAD,EAAWC,QAAX,EAAqB;AAAEC,IAAAA;AAAF,GAArB,KAA0C;AAC/C;AACA,UAAMC,SAAS,GAAGD,YAAY,EAA9B,CAF+C,CAEb;;AAClCC,IAAAA,SAAS,CACNC,UADH,CACc,OADd,EAEGC,GAFH,CAEO,EACH,GAAGR,IADA;AAEHS,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AAFR,KAFP,EAMGC,IANH,CAMQ,MAAM;AACVR,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEhB,WAAW,CAACiB,QAApB;AAA8Bb,QAAAA;AAA9B,OAAD,CAAR;AACD,KARH,EASGc,KATH,CASUC,KAAD,IAAW;AAChBZ,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE,cAAR;AAAwBG,QAAAA;AAAxB,OAAD,CAAR;AACD,KAXH;AAYD,GAfD;AAgBD,CAlBM;AAmBP,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAAU;AAC/B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB,MAAuBH,IAA7B,CAD+B,CAE/B;;AAEA,SAAO,CAACd,QAAD,EAAWC,QAAX,EAAqB;AAAEiB,IAAAA,WAAF;AAAehB,IAAAA;AAAf,GAArB,KAAuD;AAC5D;AAEA,UAAMiB,SAAS,GAAGjB,YAAY,EAA9B,CAH4D,CAG1B;;AAClC,UAAMkB,QAAQ,GAAGF,WAAW,EAA5B,CAJ4D,CAI5B;;AAChCC,IAAAA,SAAS,CACNf,UADH,CACc,OADd,EAEGiB,GAFH,CAEOJ,EAFP,EAGGK,MAHH,CAGU;AACNC,MAAAA,KAAK,EAAEH,QAAQ,CAACD,SAAT,CAAmBK,UAAnB,CAA8BC,UAA9B,CAAyC;AAC9CV,QAAAA,IAAI,EAAEA,IADwC;AAE9CC,QAAAA,MAAM,EAAEA,MAFsC;AAG9CC,QAAAA,EAAE,EAAEtB,MAAM;AAHoC,OAAzC;AADD,KAHV,EAUGa,IAVH,CAUQ,MAAM;AACVR,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEhB,WAAW,CAACiC,QAApB;AAA8BZ,QAAAA;AAA9B,OAAD,CAAR;AACD,KAZH,EAaGH,KAbH,CAaUgB,GAAD,IAAS;AACd3B,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE,qBAAR;AAA+BkB,QAAAA;AAA/B,OAAD,CAAR;AACD,KAfH;AAgBD,GArBD;AAsBD,CA1BM;AA2BP;;;;AAGA,OAAO,MAAMC,UAAU,GAAId,IAAD,IAAU;AAClC,QAAM;AAAEe,IAAAA,MAAF;AAASC,IAAAA;AAAT,MAAoBhB,IAA1B,CADkC,CAElC;;AACAhB,EAAAA,OAAO,CAACC,GAAR,CAAYe,IAAI,CAACgB,MAAjB;AACA,SAAO,CAAC9B,QAAD,EAAWC,QAAX,EAAqB;AAAEiB,IAAAA,WAAF;AAAehB,IAAAA;AAAf,GAArB,KAAuD;AAC5D;AAEA,UAAMiB,SAAS,GAAGjB,YAAY,EAA9B,CAH4D,CAG1B;;AAClC,UAAMkB,QAAQ,GAAGF,WAAW,EAA5B,CAJ4D,CAI5B;;AAChCC,IAAAA,SAAS,CACNf,UADH,CACc,OADd,EAEGiB,GAFH,CAEOQ,MAFP,EAGGP,MAHH,CAGU;AACN,OAAC,WAASQ,MAAV,GAAmBV,QAAQ,CAACD,SAAT,CAAmBK,UAAnB,CAA8BO,MAA9B;AADb,KAHV,EAMGvB,IANH,CAMQ,MAAM;AACVR,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEhB,WAAW,CAACuC,WAApB;AAAiClB,QAAAA;AAAjC,OAAD,CAAR;AACD,KARH,EASGH,KATH,CASUgB,GAAD,IAAS;AACd3B,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE,iBAAR;AAA2BkB,QAAAA;AAA3B,OAAD,CAAR;AACD,KAXH;AAYD,GAjBD;AAkBD,CAtBM","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport 'firebase/firestore';\r\nexport const createList = (list) => {\r\n  console.log(list);\r\n  return (dispatch, getState, { getFirestore }) => {\r\n    // getfirestore from index middleware\r\n    const fireStore = getFirestore(); //ref to firestore database\r\n    fireStore\r\n      .collection('lists')\r\n      .add({\r\n        ...list,\r\n        createdAt: new Date(),\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: actionTypes.ADD_LIST, list });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({ type: 'CREATE_ERROR', error });\r\n      });\r\n  };\r\n};\r\nexport const addItem = (item) => {\r\n  const { name, amount, id } = item;\r\n  // console.log(name, amount, id);\r\n\r\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n    //make async call to database\r\n\r\n    const firestore = getFirestore(); // ref to firestore api\r\n    const firebase = getFirebase(); //ref to our data base\r\n    firestore\r\n      .collection('lists')\r\n      .doc(id)\r\n      .update({\r\n        items: firebase.firestore.FieldValue.arrayUnion({\r\n          name: name,\r\n          amount: amount,\r\n          id :uuidv4(),\r\n        }),\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: actionTypes.ADD_ITEM, item });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({ type: 'UPDATE_UTENTE_ERROR', err });\r\n      });\r\n  };\r\n};\r\n/**washingtonRef.update({\r\n    regions: firebase.firestore.FieldValue.arrayUnion(\"greater_virginia\")\r\n}); */\r\nexport const deleteItem = (item) => {\r\n  const { listId,itemId } = item;\r\n  // console.log(name, amount, id);\r\n  console.log(item.itemId)\r\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n    //make async call to database\r\n\r\n    const firestore = getFirestore(); // ref to firestore api\r\n    const firebase = getFirebase(); //ref to our data base\r\n    firestore\r\n      .collection('lists')\r\n      .doc(listId)\r\n      .update({\r\n        [\"items.\"+itemId]: firebase.firestore.FieldValue.delete()\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: actionTypes.REMOVE_ITEM, item });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({ type: \"ERROR_ON_DELETE\", err });\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}